#!/usr/bin/env bash
set -e

ZEALOT_ROOT=$(pwd)
EXAMPLE_ENV_FILE="${ZEALOT_ROOT}/config.env"
ENV_FILE=".env"
DOCKER_COMPOSE_FILE="docker-compose.yml"

TEMPLATE_PATH="templates"
DOCKER_COMPOSE_TEMPLATE_PATH="${TEMPLATE_PATH}/docker-compose"
CADDY_TEMPLATE_FILE="${TEMPLATE_PATH}/Caddyfile"

ROOTFS_ETC_PATH="rootfs/etc"
CADDY_FILE="${ROOTFS_ETC_PATH}/Caddyfile"
CERTS_PATH="${ROOTFS_ETC_PATH}/certs"

DOCKER_CADDY_CERT_PATH="/etc/certs"

ZEALOT_TAG=nightly
ZEALOT_USE_SSL=false
ZEALOT_CLEAN_UP=false

##
## Cleanup
##
cleanup () {
  if [ "$ZEALOT_CLEAN_UP" == "true" ]; then
    return 0;
  fi

  echo
  echo "== Cleaning up =="
  rm $ENV_FILE $DOCKER_COMPOSE_FILE 2> /dev/null
  docker-compose down &> /dev/null
  ZEALOT_CLEAN_UP=true
}
trap cleanup ERR INT TERM HUP QUIT

##
## Create docker volumes for zealot
##
create_docker_volumes () {
  echo ""
  echo "== Creating volumes for persistent storage =="
  echo "Created $(docker volume create --name=zealot-data)."
  echo "Created $(docker volume create --name=zealot-postgres)."
  echo "Created $(docker volume create --name=zealot-redis)."
}

##
## Configuring env file
##
configure_env_file () {
  echo ""
  echo "== Configuring $ENV_FILE file =="
  if [ -f "$ENV_FILE" ]; then
    echo "File already exists, skipped."
  else
    echo "Creating $ENV_FILE file"
    cp -n "$EXAMPLE_ENV_FILE" "$ENV_FILE"
  fi
}

##
## Download docker images
##
download_docker_images () {
  echo ""
  echo "== Pulling Docker images =="
  docker-compose pull
  echo "Docker images pulled."
}

##
## Generate secret key for zealot
##
generate_secret_key () {
  echo ""
  echo "== Generating secret key =="
  SECRET_TOKEN=$(docker-compose run --rm zealot rails secret 2> /dev/null | tail -n1 | sed -e 's/[\/&]/\\&/g')
  sed -i -e 's/^SECRET_TOKEN=.*$/SECRET_TOKEN='"$SECRET_TOKEN"'/' $ENV_FILE
  clean_sed_temp_file $ENV_FILE
  echo "Secret key written to $ENV_FILE"
}

check_zealot_domain () {
  echo ""
  echo "== Set zealot domain =="
  status=$(grep 'ZEALOT_DOMAIN' $ENV_FILE | awk '{print $1}')
  domain=$(grep 'ZEALOT_DOMAIN' $ENV_FILE | awk '{split($0,a,"="); print a[2]}')

  read_from_user=0
  if [ -z "$domain" ]; then
    read_from_user=1
    echo "Input zealot domain, without http(s):// (eg, zealot.test)."
    printf "ZEALOT_DOMAIN="
    read domain
  else
    echo "Read zealot domain: ${domain}, skipped"
  fi

  if [ -z "$domain" ]; then
    echo "Read ZEALOT_DOMAIN failed, skipped"
  else
    sed -i -e 's/^.*ZEALOT_DOMAIN=.*$/ZEALOT_DOMAIN='"$domain"'/' $ENV_FILE
    clean_sed_temp_file $ENV_FILE
    if [ "$read_from_user" == "1" ]; then
      echo "Zealot domain written to $ENV_FILE"
    fi
  fi
}

##
## Start deploy flow
##
choose_deploy () {
  echo ""
  echo "== Configuring Deploy =="
  printf "How do you deploy?\n\
  Use [L]et's Encryt SSL (default)\n\
  Use [S]elf-signed SSL\n\
  Do [n]ot use SSL? \n"
  read -n 1 action
  echo ""

  local SSL_NAME=letsencrypt
  case "$action" in
    L | l )
      check_or_configure_letsencrypt_ssl;;
    S | s )
      check_or_generate_selfsigned_ssl;;
    N | n )
      enable_rails_serve_static_files;;
    * )
      ;;
  esac

  if [ -z "$action" ]; then
    check_or_configure_letsencrypt_ssl
  fi
}

##
## Check or generate Caddyfile
##
check_or_generate_caddyfile () {
  if [ -f "$CADDY_FILE" ]; then
    echo "${CADDY_FILE} File already exists, skipped."
  else
    echo "Creating $CADDY_FILE file"
    mkdir -p $ROOTFS_ETC_PATH
    cp -n "$CADDY_TEMPLATE_FILE" "$CADDY_FILE"
  fi
}

##
## Check or configure Let's Encrypt SSL
##
check_or_configure_letsencrypt_ssl () {
  check_zealot_domain

  echo ""
  echo "== Configuring Let's Encrypt SSL/TLS =="
  echo "What is you email for let's encrypt?"
  printf "ZEALOT_CERT_EMAIL="
  read email

  if [ -z "$email" ]; then
    echo "Read ZEALOT_CERT_EMAIL failed, Quitting"
    exit
  else
    sed -i -e 's/^.*ZEALOT_CERT_EMAIL=.*$/ZEALOT_CERT_EMAIL='"$email"'/' $ENV_FILE
    clean_sed_temp_file $ENV_FILE
    echo "Let's Encrypt email written to $ENV_FILE"

    check_or_generate_caddyfile
    sed -i -e 's/^.*tls .*$/  tls {$ZEALOT_CERT_EMAIL}/' $CADDY_FILE
    clean_sed_temp_file $CADDY_FILE
    echo "Let's Encrypt email written to $CADDY_FILE"
  fi

  ZEALOT_USE_SSL="letsencrypt"
}

##
## Check or Generate self signed SSL
##
check_or_generate_selfsigned_ssl () {
  check_zealot_domain

  DOMAIN_NAME=$(grep 'ZEALOT_DOMAIN' $ENV_FILE | awk '{split($0,a,"="); print a[2]}')
  echo ""
  echo "== Configuring self signed SSL/TLS cert =="
  echo "Generating self-signed cert for ${DOMAIN_NAME}"

  CERT_NAME="${DOMAIN_NAME}.pem"
  KEY_NAME="${DOMAIN_NAME}-key.pem"
  CERT_FILE="${CERTS_PATH}/${CERT_NAME}"
  KEY_FILE="${CERTS_PATH}/${KEY_NAME}"

  mkdir -p "$(pwd)/$CERTS_PATH"
  docker run --rm --name zealot-mkcert -v $(pwd)/$CERTS_PATH:/root/.local/share/mkcert \
    icyleafcn/mkcert /bin/ash -c "mkcert -install && mkcert ${DOMAIN_NAME}" &> /dev/null

  while true; do
    if [ -f "$CERT_FILE" ] && [ -f "$KEY_FILE" ];then
      sed -i -e 's/^.*ZEALOT_CERT=.*$/ZEALOT_CERT='"$CERT_NAME"'/' $ENV_FILE
      sed -i -e 's/^.*ZEALOT_CERT_KEY=.*$/ZEALOT_CERT_KEY='"$KEY_NAME"'/' $ENV_FILE
      clean_sed_temp_file $ENV_FILE
      echo "Generated cert and key to $CERTS_PATH"

      check_or_generate_caddyfile
      local CADDY_CERTS_PATH=$(echo $DOCKER_CADDY_CERT_PATH | sed 's/\//\\\//g')
      sed -i -e 's/^  tls .*$/  tls '"$CADDY_CERTS_PATH"'\/{$ZEALOT_CERT} '"$CADDY_CERTS_PATH"'\/{$ZEALOT_CERT_KEY}/' $CADDY_FILE
      clean_sed_temp_file $CADDY_FILE
      echo "Self-signed cert and key written to $CADDY_FILE"

      break
    fi
    sleep 1
  done

  ZEALOT_USE_SSL="selfsigned"
}

##
## Enable rails serve static files
##
enable_rails_serve_static_files () {
  SSL_NAME=false

  echo ""
  echo "== Enable Rails serve static files =="
  sed -i -e 's/^# RAILS_SERVE_STATIC_FILES=.*$/RAILS_SERVE_STATIC_FILES=true/' $ENV_FILE
  clean_sed_temp_file $ENV_FILE
  echo "Written RAILS_SERVE_STATIC_FILES=true written to $ENV_FILE"
}

##
## Check and install docker
##
check_and_install_docker () {
  docker_path=`which docker.io || which docker`
  if [ -z $docker_path ]; then
    os_type=$(current_os)
    if [ "$os_type" == "Darwin" ]; then
      echo "Docker not installed. Click https://docs.docker.com/docker-for-mac/install/ manually, "
      echo "after then hit enter to continue or Ctrl+C to exit"
      read
    else
      read -p "Docker not installed. Enter to install from https://get.docker.com/ or Ctrl+C to exit"
      curl https://get.docker.com/ | sh
    fi
  fi

  docker_path=`which docker.io || which docker`
  if [ -z $docker_path ]; then
    echo "Docker install failed. Quitting."
    exit
  fi
}

##
## Check and install docker-compose
##
check_and_install_docker_compose () {
  docker_compose_path=`which docker-compose`
  if [ -z $docker_compose_path ]; then
    read -p "Docker Compose not installed. Enter to install from https://docs.docker.com/compose/install/ or Ctrl+C to exit"
    curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    export PATH="/usr/local/bin/docker-compose:$PATH"
  fi

  docker_compose_path=`which docker-compose`
  if [ -z $docker_compose_path ]; then
    echo "Docker Compose install failed. Quitting."
    exit
  fi
}

##
## Generate Docker compose
##
generate_docker_compose () {
  echo ""
  echo "== Generating docker-compose.yml =="
  echo "# Generated on $(date)" > $DOCKER_COMPOSE_FILE
  echo "# USE SSL: ${ZEALOT_USE_SSL}" >> $DOCKER_COMPOSE_FILE
  cat $DOCKER_COMPOSE_TEMPLATE_PATH/base.yml >> $DOCKER_COMPOSE_FILE

  if [ ! "$ZEALOT_USE_SSL" == "false" ]; then
    cat $DOCKER_COMPOSE_TEMPLATE_PATH/cert.yml >> $DOCKER_COMPOSE_FILE
  fi

  cat $DOCKER_COMPOSE_TEMPLATE_PATH/zealot.yml >> $DOCKER_COMPOSE_FILE
  if [ "$ZEALOT_USE_SSL" == "false" ]; then
    echo "    ports:"  >> $DOCKER_COMPOSE_FILE
    echo '      - "13000:3000"' >> $DOCKER_COMPOSE_FILE
  fi

  cat $DOCKER_COMPOSE_TEMPLATE_PATH/volumes.yml >> $DOCKER_COMPOSE_FILE
  echo "Generated $DOCKER_COMPOSE_FILE"
}

##
## Current OS name
##
current_os() {
  echo `uname -s`
}

##
## Docker check
##
docker_check() {
  check_and_install_docker
  check_and_install_docker_compose
}

##
## Banner
##
print_banner () {
  echo '  ______          _       _
 |___  /         | |     | |
    / / ___  __ _| | ___ | |_
   / / / _ \/ _` | |/ _ \| __|
  / /_|  __/ (_| | | (_) | |_
 /_____\___|\__,_|_|\___/ \__|'
}

##
## Clean sed temp file (always -e as suffix) if exists
##
clean_sed_temp_file () {
  local FILENAME=$1
  if [ -f "${FILENAME}-e" ]; then
    rm ${FILENAME}-e
  fi
}

all_done () {
  docker-compose down &> /dev/null

  echo ""
  echo "== All done =="
  echo "Run the following command get Zealot running:"
  echo ""
  echo "  docker-compose up -d"
  echo ""
}

###################################
# 脚本开始
###################################

print_banner

docker_check
configure_env_file
choose_deploy
generate_docker_compose
# create_docker_volumes # Moved into docker-compose.yml
download_docker_images
generate_secret_key
all_done
